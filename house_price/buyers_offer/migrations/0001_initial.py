# Generated by Django 3.1.5 on 2021-03-20 20:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuyersOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Enter the first name', max_length=100)),
                ('last_name', models.CharField(help_text='Enter the last name', max_length=100)),
                ('email', models.EmailField(help_text='Enter the email address', max_length=254)),
                ('phone', models.IntegerField(help_text='Enter the phone number')),
                ('spouse_first_name', models.CharField(help_text='Enter the spouse first name', max_length=100)),
                ('spouse_last_name', models.CharField(help_text='Enter the spouse last name', max_length=100)),
                ('spouse_email', models.EmailField(help_text='Enter the spouse email address', max_length=254)),
                ('offer_price', models.IntegerField(help_text='Enter the offer price')),
                ('payment_type', models.CharField(choices=[('Cash', 'Cash'), ('Loan', 'Loan')], help_text='Enter a type of payment', max_length=50)),
                ('fund_verification', models.CharField(choices=[('Attached with this agreement', 'Attached with this agreement'), ('3 or more days', '3 or more days')], help_text='Enter the days needed for fund verification', max_length=50, null=True)),
                ('fund_verification_other', models.CharField(help_text='Enter additional details for fund verification', max_length=50, null=True)),
                ('first_loan_amount', models.IntegerField(help_text='Enter the first loan amount', null=True)),
                ('first_loan_type', models.CharField(choices=[('Conventional Loan', 'Conventional Loan'), ('FHA', 'FHA'), ('VA', 'VA'), ('Seller Financing', 'Seller Financing'), ('AFA', 'AFA'), ('Other', 'Other')], default='Conventional Loan', help_text='Enter the type of first loan', max_length=50, null=True)),
                ('first_loan_type_other', models.CharField(help_text='Enter additional details for loan type', max_length=50, null=True)),
                ('first_loan_fixed_rate', models.IntegerField(help_text='Enter the fixed loan rate', null=True)),
                ('first_loan_adjustable_loan_rate', models.IntegerField(help_text='Enter the adjustable loan rate', null=True)),
                ('first_loan_max_points', models.IntegerField(help_text='Enter the maximum points to pay', null=True)),
                ('down_payment', models.IntegerField(help_text='Enter the amount of down payment for the loan', null=True)),
                ('down_payment_days', models.IntegerField(help_text='Enter the amount of down payment days for the loan', null=True)),
                ('second_loan', models.BooleanField(help_text='Does the buyer have a second loan', null=True)),
                ('second_loan_amount', models.IntegerField(help_text='Enter the first loan amount', null=True)),
                ('second_loan_type', models.CharField(choices=[('Conventional Loan', 'Conventional Loan'), ('FHA', 'FHA'), ('VA', 'VA'), ('Seller Financing', 'Seller Financing'), ('AFA', 'AFA'), ('Other', 'Other')], default='Conventional Loan', help_text='Enter the type of first loan', max_length=50, null=True)),
                ('second_loan_type_other', models.CharField(help_text='Enter additional details for loan type', max_length=50, null=True)),
                ('second_loan_fixed_rate', models.IntegerField(help_text='Enter the fixed loan rate', null=True)),
                ('second_loan_adjustable_loan_rate', models.IntegerField(help_text='Enter the adjustable loan rate', null=True)),
                ('second_loan_max_points', models.IntegerField(help_text='Enter the maximum points to pay', null=True)),
                ('appraisal_contingency', models.BooleanField(help_text='Does the buyer have an appraisal contingency?', null=True)),
                ('appraisal_contingency_days', models.IntegerField(help_text='Enter the appraisal contingency removal days', null=True)),
                ('loan_prequalification_days', models.IntegerField(help_text='Enter the loan prequalification days', null=True)),
                ('loan_contingency', models.BooleanField(help_text='Does the buyer have a loan contingency?', null=True)),
                ('loan_contingency_days', models.IntegerField(help_text='Enter the loan contingency removal days', null=True)),
                ('apartment', models.CharField(help_text='Enter the property apartment', max_length=50)),
                ('street', models.CharField(help_text='Enter the property street', max_length=50)),
                ('city', models.CharField(help_text='Enter the property city', max_length=50)),
                ('county', models.CharField(help_text='Enter the property county', max_length=50)),
                ('zipcode', models.IntegerField(help_text='Enter the property zipcode')),
                ('parcel_number', models.CharField(help_text='Enter the parcel number', max_length=50)),
                ('escrow_date', models.DateField(help_text='Enter the Escrow Dose Date', null=True)),
                ('escrow_days', models.IntegerField(help_text='Enter the Escrow Dose Days', null=True)),
                ('ad', models.BooleanField(help_text='Enter the acknowledgement of form AD', null=True)),
                ('buyer_agent', models.BooleanField(help_text='Does the buyer have an agent?', null=True)),
                ('buyer_brokerage_firm', models.CharField(help_text="Enter the buyer's brokerage firm", max_length=100, null=True)),
                ('buyer_brokerage_license_number', models.CharField(help_text="Enter the buyer's brokerage license number", max_length=100, null=True)),
                ('buyer_agent_name', models.CharField(help_text="Enter the buyer's agent name", max_length=100, null=True)),
                ('buyer_agent_license_number', models.CharField(help_text="Enter the buyer's agent license number", max_length=100, null=True)),
                ('dual_brokerage', models.BooleanField(help_text='Is the brokerage dual?', null=True)),
                ('seller_agent', models.BooleanField(help_text='Does the seller have an agent?', null=True)),
                ('seller_brokerage_firm', models.CharField(help_text="Enter the seller's brokerage firm", max_length=100, null=True)),
                ('seller_brokerage_license_number', models.CharField(help_text="Enter the seller's brokerage license number", max_length=100, null=True)),
                ('seller_agent_name', models.CharField(help_text="Enter the seller's agent name", max_length=100, null=True)),
                ('seller_agent_license_number', models.CharField(help_text="Enter the seller's agent license number", max_length=100, null=True)),
                ('prbs', models.BooleanField(help_text='Enter the acknowledgement of form PRBS', null=True)),
                ('initial_deposit', models.IntegerField(help_text='Enter the initial deposit', null=True)),
                ('deposit_payment_type', models.CharField(choices=[("Cashier's Check", "Cashier's Check"), ('Personal Check', 'Personal Check'), ('Other', 'Other')], help_text='Enter the type of deposit payment', max_length=50, null=True)),
                ('deposit_payment_type_other', models.CharField(help_text='Enter the other deposit payment type', max_length=100, null=True)),
                ('deposit_due', models.CharField(choices=[('Business days after acceptance', 'Business days after acceptance'), ('Other', 'Other')], help_text='Enter the type of deposit due', max_length=50, null=True)),
                ('deposit_due_other', models.CharField(help_text='Enter the other deposit due', max_length=100, null=True)),
                ('additional_terms', models.CharField(help_text='Enter the additional financing terms', max_length=100, null=True)),
                ('agreement_contingency', models.BooleanField(help_text='Is this agreement contingent upon sale of any property owned by the buyer?', null=True)),
                ('other_terms', models.CharField(help_text='Enter the other terms', max_length=100, null=True)),
                ('natural_hazard', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('tax_report', models.BooleanField(help_text='Is there a tax report?', null=True)),
                ('environmental_report', models.BooleanField(help_text='Is there an environmental report?', null=True)),
                ('insurance_claim_report', models.BooleanField(help_text='Is there an insurance claim report?', null=True)),
                ('termite_inspection_report', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('smoke_alarm', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('government_inspection', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('government_retrofit', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('escrow_fee', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller'), ('Both', 'Both')], help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('escrow_holder', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('escrow_general_provision', models.IntegerField(help_text="Enter the escrow holder's general provision", null=True)),
                ('title_insurance', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('title_policy', models.CharField(help_text="Enter the institute for preparing the owner's title policy", max_length=100, null=True)),
                ('county_transfer', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('city_transfer', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('hoa_transfer', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('hoa_document', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('private_transfer', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('section_1_termite', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('tc_fee', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Buyer', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('warranty_waive', models.BooleanField(help_text='Would the buyer waive the warranty?', null=True)),
                ('warranty_plan', models.CharField(choices=[('Buyer', 'Buyer'), ('Seller', 'Seller')], default='Seller', help_text='Enter the type of cost allocation', max_length=50, null=True)),
                ('warranty_maximal_cost', models.IntegerField(help_text='Enter the maximal cost for warranty', null=True)),
                ('upgraded_warranty', models.BooleanField(help_text='Is it an upgraded warranty?', null=True)),
                ('warranty_company', models.CharField(help_text='Enter the warranty company', max_length=100, null=True)),
                ('warranty_air_conditioner', models.BooleanField(help_text='Would the warranty cover air conditioner?', null=True)),
                ('warranty_pool_spa', models.BooleanField(help_text='Would the warranty cover pool/spa?', null=True)),
                ('warranty_buyers_choice', models.BooleanField(help_text="Shall the warranty be up to buyer's choice?", null=True)),
                ('stove', models.BooleanField(help_text='Would the sale include all the stoves?', null=True)),
                ('exceptions_1', models.CharField(help_text='Enter the exceptions', max_length=100, null=True)),
                ('refrigerators', models.BooleanField(help_text='Would the sale include all the refrigerators?', null=True)),
                ('exceptions_2', models.CharField(help_text='Enter the exceptions', max_length=100, null=True)),
                ('dryers_washers', models.BooleanField(help_text='Would the sale include all the dryers and washers?', null=True)),
                ('exceptions_3', models.CharField(help_text='Enter the exceptions', max_length=100, null=True)),
                ('additional_items', models.CharField(help_text='Enter the additional items', max_length=100, null=True)),
                ('phone_automation_system', models.BooleanField(default=True, help_text='Would the sale include all the refrigerators?', null=True)),
                ('not_owned_seller', models.CharField(help_text='Enter the items not owned by seller', max_length=100, null=True)),
                ('buyer_primary_residence', models.BooleanField(default=True, help_text="Is the property the buyer's primary residence?", null=True)),
                ('buyer_possession_1', models.CharField(help_text='Enter the time of close of escrow', max_length=100, null=True)),
                ('buyer_possession_2', models.CharField(help_text='Enter the time of close of escrow', max_length=100, null=True)),
                ('buyer_possession_3', models.CharField(help_text='Enter the time of close of escrow', max_length=100, null=True)),
                ('property_vacant_1', models.IntegerField(help_text='Enter the number of days prior to close of escrow to vacant the property', null=True)),
                ('property_vacant_2', models.BooleanField(help_text='Enter the number of days prior to close of escrow to vacant the property', null=True)),
                ('condominium', models.IntegerField(help_text='Enter the disclosure to buyer if the property is condominium', null=True)),
                ('deliver_report', models.IntegerField(help_text='Enter the days after acceptance that seller has to deliver all the reports', null=True)),
                ('inspection_contingency', models.BooleanField(help_text="Enter the buyer's claim inspection contingency", null=True)),
                ('remove_inspection_contingency', models.IntegerField(help_text='Enter the days after acceptance that seller has to deliver all the reports', null=True)),
                ('property_access', models.IntegerField(help_text='Enter the days after acceptance that buyer shall have access to the property', null=True)),
                ('days_perform', models.IntegerField(help_text='Enter the days to perform', null=True)),
                ('cancel_agreement', models.IntegerField(help_text='Enter the days each party shall give the other party while cancelling this agreement', null=True)),
                ('final_verification', models.IntegerField(help_text='When to make final verification of condition', null=True)),
                ('expiration_date', models.DateField(help_text='Enter the expiration date', null=True)),
                ('expiration_time', models.CharField(help_text='Enter the expiration time', max_length=100, null=True)),
                ('envelope_id', models.CharField(help_text='Enter the envelope ID', max_length=100, null=True)),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('primary_key', models.CharField(max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
